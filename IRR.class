/*
 * Copyright (c) 2018 Matthew Seeger <mseeger@salesforce.com>

 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * Utility class to calculate IRR and NPV
 * @author Matthew Seeger <mseeger@salesforce.com>
 */
public class IRR{
  /**
   * Compute the IRR from a List of cashflows without seeding a guess
   * @param List<Decimal> List of evenly spaced ordered cashflows
   * @return Decimal IRR to closest whole percent .10 = 10%
   */ 
  public static Decimal calculate(List<Decimal> cashflows){
    return IRR.calculate(cashflows, 0.10);
  }
  /**
   * Compute the IRR from a List of cashflows and privide a seeding guess
   * @param List<Decimal> List of evenly spaced ordered cashflows
   * @param Decimal seed the IRR calculation.  
   * @return Decimal IRR to closest whole percent .10 = 10%
   */ 
  public static Decimal calculate(List<Decimal> cashflows, Decimal guess){
    
    Decimal here = guess;
    Decimal npvHere = IRR.NPV(cashflows, here);
    if(npvHere == 0.0){
      return here;
    }
    else if(npvHere > 0){
      Decimal next = here + 0.01;
      Decimal npvNext = IRR.NPV(cashflows, next);
      if(npvNext == 0){
        return next;
      }
      else if(npvNext < 0){
        return Math.abs(npvNext) < Math.abs(npvHere) ? next : here;
      }
      else{
        return IRR.calculate(cashflows, next);
      }
    }
    else{
      Decimal next = here - 0.01;
      Decimal npvNext = IRR.NPV(cashflows, next);
      if(npvNext == 0){
        return next;
      }
      else if(npvNext > 0){
        return Math.abs(npvNext) < Math.abs(npvHere) ? next : here;
      }
      else{
        return IRR.calculate(cashflows, next);
      }
    }
  }
  /**
   * Compute the NPV from a List of cashflows provided a discount rate
   * <p>
   * First entry is at t=0 and will not be discounted
   * <p> 
   * Note Excel NPV assumes first entry in t=1. Prepend 0 to the list to do excel computation
   * @param List<Decimal> List of evenly spaced ordered cashflows
   * @return Decimal IRR to closest whole percent .10 = 10%
   * @see <a href="https://support.office.com/en-us/article/npv-function-8672cb67-2576-4d07-b67b-ac28acf2a568"/>
   */
  public static Decimal NPV(Decimal[] cashflows, Decimal discountRate){
    Double npv = 0.0;
    Integer count = 0;
    for(count = 0; count < cashflows.size(); count++){
      Decimal disc = System.Math.pow(Double.valueOf(1.0 + discountRate), Double.valueOf(count));
      npv = npv + (cashflows[count] /disc);
    }
    return npv;
  }
}